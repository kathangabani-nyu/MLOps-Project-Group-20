version: "3.8"

services:
  # ========================
  # Eval Online Stack
  # ========================

  fastapi_server:
    build:
      context: /home/cc/eval-online-chi/fastapi_pt
      dockerfile: Dockerfile
    container_name: fastapi_server
    ports:
      - "9002:9002"

  flask:
    build:
      context: https://github.com/teaching-on-testbeds/gourmetgram.git#fastapi
    container_name: flask
    ports:
      - "5000:5000"
    environment:
      - FASTAPI_SERVER_URL=http://fastapi_server:9002

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=Project20
      - GF_SECURITY_ADMIN_PASSWORD=Project20

  jupyter:
    image: quay.io/jupyter/pytorch-notebook:pytorch-2.5.1
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - /home/cc/train/workspace:/home/project20/work
    command: >
      bash -c "python3 -m pip install alibi-detect && start-notebook.sh"

  # ========================
  # Tracking Service Stack
  # ========================

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "Project20"
      MINIO_ROOT_PASSWORD: "Project20"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  minio-create-bucket:
    image: minio/mc
    container_name: minio-create-bucket
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 Project20 Project20 &&
      if ! mc ls minio/mlflow-artifacts; then
        mc mb minio/mlflow-artifacts &&
        echo 'Bucket mlflow-artifacts created'
      else
        echo 'Bucket mlflow-artifacts already exists';
      fi"

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mlflowdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.20.2
    container_name: mlflow
    restart: always
    depends_on:
      - minio
      - postgres
      - minio-create-bucket
    environment:
      MLFLOW_TRACKING_URI: http://0.0.0.0:8000
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: "Project20"
      AWS_SECRET_ACCESS_KEY: "Project20"
    ports:
      - "8000:8000"
    command: >
      /bin/sh -c "pip install psycopg2-binary boto3 &&
      mlflow server --backend-store-uri postgresql://user:password@postgres/mlflowdb \
      --artifacts-destination s3://mlflow-artifacts/ --serve-artifacts --host 0.0.0.0 --port 8000"

volumes:
  food11:
    external: true
  minio_data:
  postgres_data:
