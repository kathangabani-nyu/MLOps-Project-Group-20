version: "3.8"

services:
  # MinIO object store service provides storage for checkpoints from Ray Train jobs
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "Project20"
      MINIO_ROOT_PASSWORD: "Project20"
    healthcheck:
      test: timeout 5s bash -c '>/dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Create the bucket “ray” after MinIO is healthy
  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        mc alias set minio http://minio:9000 Project20 Project20 &&
        if ! mc ls minio/ray; then
          mc mb minio/ray &&
          echo 'Bucket ray created';
        else
          echo 'Bucket ray already exists';
        fi
      "

  # Ray head node
  ray-head:
    image: ray-rocm:2.42.1
    container_name: ray-head
    command: |
      /bin/sh -c "
        mkdir -p /tmp/ray &&
        chown -R root:root /tmp/ray &&
        ray metrics launch-prometheus &&
        ray start --head --port=6379 --dashboard-host=0.0.0.0 \
                  --block --metrics-export-port=8080
      "
    ports:
      - "6379:6379"
      - "8265:8265"
      - "8080:8080"
      - "8090:8090"
      - "9090:9090"
    shm_size: '12g'
    volumes:
      - ray_tmp:/tmp/ray
    environment:
      - RAY_GRAFANA_HOST=http://grafana:3000
      - RAY_GRAFANA_IFRAME_HOST=http://${HOST_IP}:3000
      - RAY_PROMETHEUS_HOST=http://ray-head:9090
      - RAY_PROMETHEUS_NAME=Prometheus
      - AWS_ACCESS_KEY_ID=Project20
      - AWS_SECRET_ACCESS_KEY=Project20
      - AWS_ENDPOINT_URL=http://minio:9000
    user: root

  # Grafana for monitoring Ray
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    entrypoint: |
      /bin/sh -c "
        while [ ! -f /tmp/ray/session_latest/metrics/grafana/grafana.ini ]; do
          echo 'Waiting for Grafana config...'
          sleep 2
        done
        /run.sh --config /tmp/ray/session_latest/metrics/grafana/grafana.ini
      "
    ports:
      - "3000:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ray_tmp:/tmp/ray:ro
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/tmp/ray/session_latest/metrics/grafana/provisioning
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_DATABASE_TYPE=sqlite3
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_AUTO_SIGN_UP=true
    depends_on:
      - ray-head

  # Ray worker nodes
  ray-worker-0:
    image: ray-rocm:2.42.1
    container_name: ray-worker-0
    command: ["ray", "start", "--address=ray-head:6379", "--num-cpus=32", "--num-gpus=1", "--block"]
    devices:
      - /dev/kfd
      - /dev/dri/renderD128
    environment:
      - HIP_VISIBLE_DEVICES=0
      - ROCR_VISIBLE_DEVICES=0
      - AWS_ACCESS_KEY_ID=Project20
      - AWS_SECRET_ACCESS_KEY=Project20
      - AWS_ENDPOINT_URL=http://minio:9000
    shm_size: '12g'
    depends_on:
      - ray-head

  ray-worker-1:
    image: ray-rocm:2.42.1
    container_name: ray-worker-1
    command: ["ray", "start", "--address=ray-head:6379", "--num-cpus=32", "--num-gpus=1", "--block"]
    devices:
      - /dev/kfd
      - /dev/dri/renderD129
    environment:
      - HIP_VISIBLE_DEVICES=1
      - ROCR_VISIBLE_DEVICES=1
      - AWS_ACCESS_KEY_ID=Project20
      - AWS_SECRET_ACCESS_KEY=Project20
      - AWS_ENDPOINT_URL=http://minio:9000
    shm_size: '12g'
    depends_on:
      - ray-head

volumes:
  minio_data:
  postgres_data:
  grafana_storage:
  ray_tmp:
